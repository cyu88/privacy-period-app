
class User:
    '''
    Represents a user of the app.

    Attributes:
        user_id (str): The username of the user.
        age (int): The age of the user.
        cycle_length (int): The average length of the user's menstrual cycle.
        period_length (int): The average length of the user's menstrual period.
        period_history (list): A list to store the start dates of the user's periods.
    '''

    def __init__(self, user_id, age, cycle_length, period_length):
        self.user_id = user_id
        self.age = age
        self.cycle_length = cycle_length
        self.period_length = period_length
        self.period_history = []  # List to store period start dates

    def add_period_start_date(self, start_date):
        self.period_history.append(start_date)

    def get_last_period_start_date(self):
        if self.period_history:
            return self.period_history[-1]
        else:
            return None

    def predict_next_period(self):
        last_period = self.get_last_period_start_date()
        if last_period:
            next_period = last_period + timedelta(days=self.cycle_length)
            return next_period
        else:
            return None

    def get_cycle_day(self):
        last_period = self.get_last_period_start_date()
        if last_period:
            today = datetime.now().date()
            cycle_day = (today - last_period.date()).days + 1
            return cycle_day
        else:
            return None

    def get_cycle_phase(self):
        cycle_day = self.get_cycle_day()
        if cycle_day is None:
            return "No cycle data available"

        if cycle_day <= self.period_length:
            return "Menstrual Phase"
        elif cycle_day <= self.cycle_length:
            return "Follicular Phase"
        elif cycle_day <= self.cycle_length + 2:
            return "Ovulatory Phase"
        else:
            return "Luteal Phase"
